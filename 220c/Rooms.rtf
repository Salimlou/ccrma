{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red17\green100\blue0;\red19\green0\blue205;\red21\green124\blue0;
}
\deftab720
\pard\pardeftab720\ql\qnatural

\f0\fs18 \cf0 s.boot;\
\
(\
fork \{\
	SynthDef("RouterForStereos",\
	\{\
		Out.ar(0, In.ar(4, 2));\
	\}).add;\
	s.sync;\
	Synth("RouterForStereos", addAction: \cf2 \\addToTail\cf0 );\
\}\
)\
\
\{\cf3 |freq=440| Out.ar(4, DFM1.ar(\cf0 PinkNoise.ar(mul:0.2), freq:freq)!2)\}.play;\
\
(\
~rootbus = Bus.control;\
\
~outsidebus = Bus.control;\
~outsidebus.set(0);\
\
~windbus = Bus.control;\
~windbus.set(0);\
\
~gameoverbus = Bus.control;\
~gameoverbus.set(1);\
\
\cf3 SynthDef\cf0 (\cf4 \\rotoSynth\cf0 , \{\cf3 |freq=0| Out.ar(4, DFM1.ar(\cf0 PinkNoise.ar(mul:0.2 * In.kr(~windbus, 1) * In.kr(~gameoverbus, 1)), freq:freq)!2)\}, rates:[3]).add;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ql\qnatural\pardirnatural
\cf0 SynthDef("outside",\
\{	\
	arg freq = 4;\
	\
	var trig, root_trig, key_trig, note, note2, root, key, sound;\
	\
	trig = Impulse.kr(freq / 2.0);\
	root_trig = Impulse.kr(freq / 8.0);\
	key_trig = Impulse.kr(freq / 64.0);\
	\
	key = Drand([60, 48, 52, 64, 44].scramble, inf);\
	\
	root = Demand.kr(root_trig, 0, Dseq([0, 4, 8, 12, 16, 20, 24] + key, inf));\
	\
	Out.kr(~rootbus, root);\
	\
	note = Demand.kr(trig, 0, Dseq(([0, 4, 7, 11, 12, 16, 19, 23] + root).midicps, inf));	\
	note2 = Demand.kr(trig, 0, Dseq(([4, 7, 11, 12, 16, 19, 23] + root).midicps, inf));	\
	sound = SinOsc.ar(note, mul: EnvGen.ar(Env.perc(0.01, 0.3, 0.3, -4), trig));\
	\
	sound = sound + SinOsc.ar(note / 2 , mul: EnvGen.ar(Env.perc(0.01, 1.2, 0.3, -4), trig));\
\
	sound = sound + SinOsc.ar(note2 , mul: EnvGen.ar(Env.perc(0.01, 1.2, 0.3, -4), trig));\
	\
	sound = sound + LPF.ar(LFSaw.ar(root.midicps / 4, mul: EnvGen.ar(Env.perc(0.01, 2.4, 0.3, -4), root_trig)), root.midicps);\
	\
	sound = HPF.ar(sound, freq * 25);\
	\
	sound = sound!2;\
	\
	sound = sound * In.kr(~outsidebus, 1);\
	\
	Out.ar(4, sound * 0.4);\
	\
\}).add;\
\
SynthDef("startjump",\
\{	\
	var sound, pitch;\
	\
	pitch = In.kr(~rootbus, 1) + 24;\
	\
	sound = SinOsc.ar((1 - EnvGen.ar(Env.perc)) * ([pitch, pitch + 4, pitch + 7, pitch + 11].midicps - (pitch.midicps / 2.0)) + (pitch.midicps / 2.0), \
				    mul: EnvGen.ar(Env.perc)).sum;\
	\
	sound = sound!2;\
	\
	sound = sound * In.kr(~outsidebus, 1);\
	\
	Out.ar(4, sound * 0.2);\
	\
\}).add;\
\
SynthDef("beam",\
\{\
	var trig, note, sweep, son;\
	\
	trig = CoinGate.kr(0.5, Impulse.kr(2));\
	\
	note = Demand.kr(trig, 0, Dseq((22,24..44).midicps.scramble, inf));\
	\
	note = 44.midicps;\
	\
	sweep = LFSaw.ar(Demand.kr(trig, 0, Drand([1, 2, 2, 3, 4, 5, 6, 8, 16], inf))).exprange(40, 5000);\
\
	sweep = LFSaw.ar(3).exprange(4000, 5000);\
	\
	son = LFSaw.ar(note * [0.99, 1, 1.01]).sum;\
	son = LPF.ar(son, sweep);\
	son = Normalizer.ar(son);\
	son = son + BPF.ar(son, 2000, 2);\
\
	son = HPF.ar(son, 1000);\
	son = HPF.ar(son, sweep);\
	\
	son = (son * 5).tanh;\
	son = son + GVerb.ar(son, 10, 0.1, 0.7, mul: 0.3);\
\
	son = son * 0.01;\
	\
	son = son * In.kr(~gameoverbus, 1);\
\
	Out.ar(4, son!2)\
\}).add;\
\
SynthDef("cubedeath",\
\{ \
	Out.ar(4, BPF.ar(Formant.ar(Rand(100.0, 400.0), mul: EnvGen.kr(Env.perc(0, 0.2, 0.2, -4), doneAction: 2)), 400, rq: 8)!2)\
\}).add;\
\
SynthDef("explosion",\
\{\
	Out.ar(4, \
	HPF.ar(PinkNoise.ar, 2400, mul: EnvGen.ar(Env.linen(2, 0.0, 0.0, 0.3, 8)))!2 + \
	LPF.ar(PinkNoise.ar, 400, mul: EnvGen.ar(Env.linen(0.0, 0.0, 8.0, 0.4, -4.0).delay(2.0)))!2 +\
	SinOsc.ar(60 * [0.9, 1.0], mul: EnvGen.ar(Env.linen(0.0, 0.0, 8.0, 0.1, -4.0).delay(2.0), doneAction:2)))\
\}).add;\
\
~host = NetAddr("localhost", NetAddr.langPort);\
\
~noise_freq_responder = OSCresponder(\
	nil, "/setNoiseFreq",\
	\{|time, responder, message, address|\
		~noise.set(\\freq, message[1]);\
		~outside.set(\\freq, min(400, max(200, message[1])) / 50.0);\
	\}\
).add;\
\
~beam_on_responder = OSCresponder(\
	nil, "/setBeamOn",\
	\{|time, responder, message, address|\
		~beam = Synth("beam");\
	\}\
).add;\
\
~beam_off_responder = OSCresponder(\
	nil, "/setBeamOff",\
	\{|time, responder, message, address|\
		~beam.free();\
	\}\
).add;\
\
~cubedeath_responder = OSCresponder(\
	nil, "/playCubeDeath",\
	\{|time, responder, message, address|\
		Synth("cubedeath");\
	\}\
).add;\
\
~explosion_responder = OSCresponder(\
	nil, "/playExplosion",\
	\{|time, responder, message, address|\
		Synth("explosion");\
		~windbus.set(1.0);\
	\}\
).add;\
\
~start_outside_responder = OSCresponder(\
	nil, "/startOutside",\
	\{|time, responder, message, address|\
		~outsidebus.set(1.0);\
	\}\
).add;\
\
~start_jump_responder = OSCresponder(\
	nil, "/startJump",\
	\{|time, responder, message, address|\
		Synth("startjump");\
	\}\
).add;\
\
~stop_outside_responder = OSCresponder(\
	nil, "/stopOutside",\
	\{|time, responder, message, address|\
		~outsidebus.set(0.0);\
	\}\
).add;\
\
~game_over_responder = OSCresponder(\
	nil, "/gameOver",\
	\{|time, responder, message, address|\
		~gameoverbus.set(0.0);\
	\}\
\pard\pardeftab720\ql\qnatural
\cf0 ).add;\
\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ql\qnatural\pardirnatural
\cf0 \
~noise = Synth("rotoSynth");\
~outside = Synth("outside");\
\pard\pardeftab720\ql\qnatural
\cf0 \
// OSC TEST MESSAGES\
~outsidebus.set(0.0);\
~windbus.set(0.0);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ql\qnatural\pardirnatural
\cf0 ~host.sendMsg("/setNoiseFreq", 00);\
~host.sendMsg("/setBeamOn");\
~host.sendMsg("/setBeamOff");\
~host.sendMsg("/playCubeDeath");\
~host.sendMsg("/playExplosion");\
~host.sendMsg("/startOutside");\
~host.sendMsg("/startJump");\
\
\
// NOT IN USE\
\{SinOsc.ar\}.play;\
\
\pard\pardeftab720\ql\qnatural
\cf0 ~synth.fadeTime=5;\
~synth = \cf3 Ndef\cf0 (\cf4 \\rotoSynth\cf0 , \{\cf3 |freq=440|Saw\cf0 .ar(freq)*0.1!2\}).play;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ql\qnatural\pardirnatural
\cf0 \
~responder.remove;\
}